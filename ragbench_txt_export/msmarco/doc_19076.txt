Scheme is primarily a functional programming language. It shares many characteristics with other members of the Lisp programming language family. Scheme's very simple syntax is based on s-expressions, parenthesized lists in which a prefix operator is followed by its arguments. As in other Lisps, the term  thunk  is used in Scheme to refer to a procedure with no arguments. The term proper tail recursion refers to the property of all Scheme implementations, that they perform tail-call optimization so as to support an indefinite number of active tail calls.